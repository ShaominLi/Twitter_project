CREATE DATABASE main_db
  WITH OWNER = g1
       ENCODING = 'UTF8'
       TABLESPACE = pg_default
       LC_COLLATE = 'en_US.UTF-8'
       LC_CTYPE = 'en_US.UTF-8'
       CONNECTION LIMIT = -1;
CREATE TABLE public.users
(
  userid integer NOT NULL DEFAULT nextval('users_userid_seq'::regclass),
  name text,
  password text,
  email text,
  country text,
  inscription_date time with time zone,
  CONSTRAINT "PK_users" PRIMARY KEY (userid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.users
  OWNER TO g1;
CREATE TABLE public.post
(
  postid integer NOT NULL DEFAULT nextval('post_postid_seq'::regclass),
  userid bigint,
  date time with time zone,
  comment text,
  CONSTRAINT "PK_postid" PRIMARY KEY (postid),
  CONSTRAINT "FK_post_userid" FOREIGN KEY (userid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.post
  OWNER TO g1;

-- Index: public."FKI_post_userid"

-- DROP INDEX public."FKI_post_userid";

CREATE INDEX "FKI_post_userid"
  ON public.post
  USING btree
  (userid);

CREATE TABLE public.comments
(
  commentid integer NOT NULL DEFAULT nextval('comments_commentid_seq'::regclass),
  postid bigint,
  userid bigint,
  comment text,
  date time with time zone,
  CONSTRAINT "FK_commentid" PRIMARY KEY (commentid),
  CONSTRAINT "FK_comments_postid" FOREIGN KEY (postid)
      REFERENCES public.post (postid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT "FK_comments_userid" FOREIGN KEY (userid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.comments
  OWNER TO g1;

-- Index: public."FKI_comments_postid"

-- DROP INDEX public."FKI_comments_postid";

CREATE INDEX "FKI_comments_postid"
  ON public.comments
  USING btree
  (postid);

-- Index: public."FKI_comments_userid"

-- DROP INDEX public."FKI_comments_userid";

CREATE INDEX "FKI_comments_userid"
  ON public.comments
  USING btree
  (userid);

CREATE TABLE public.post_like
(
  postid bigint,
  userid bigint,
  CONSTRAINT "FK_post_like_postid" FOREIGN KEY (postid)
      REFERENCES public.post (postid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT "FK_post_like_userid" FOREIGN KEY (userid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.post_like
  OWNER TO g1;

-- Index: public."FKI_post_like_postid"

-- DROP INDEX public."FKI_post_like_postid";

CREATE INDEX "FKI_post_like_postid"
  ON public.post_like
  USING btree
  (postid);

-- Index: public."FKI_post_like_userid"

-- DROP INDEX public."FKI_post_like_userid";

CREATE INDEX "FKI_post_like_userid"
  ON public.post_like
  USING btree
  (userid);

CREATE TABLE public.comment_like
(
  userid bigint,
  commentid bigint,
  CONSTRAINT "FK_CL_commentid" FOREIGN KEY (commentid)
      REFERENCES public.comments (commentid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT "FK_CL_userid" FOREIGN KEY (userid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.comment_like
  OWNER TO g1;

-- Index: public."FKI_CL_commentid"

-- DROP INDEX public."FKI_CL_commentid";

CREATE INDEX "FKI_CL_commentid"
  ON public.comment_like
  USING btree
  (commentid);

-- Index: public."FKI_CL_userid"

-- DROP INDEX public."FKI_CL_userid";

CREATE INDEX "FKI_CL_userid"
  ON public.comment_like
  USING btree
  (userid);

CREATE TABLE public.friends
(
  friendid bigint,
  userid bigint,
  CONSTRAINT "FK_friends_friendid" FOREIGN KEY (friendid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT "FK_friends_userid" FOREIGN KEY (userid)
      REFERENCES public.users (userid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.friends
  OWNER TO g1;

-- Index: public."FKI_friends_friendid"

-- DROP INDEX public."FKI_friends_friendid";

CREATE INDEX "FKI_friends_friendid"
  ON public.friends
  USING btree
  (friendid);

-- Index: public."FKI_friends_userid"

-- DROP INDEX public."FKI_friends_userid";

CREATE INDEX "FKI_friends_userid"
  ON public.friends
  USING btree
  (userid);

